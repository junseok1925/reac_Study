{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rkdwn\\\\Documents\\\\GitHub\\\\react_Study\\\\front\\\\components\\\\LoginForm.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from \"react\";\nimport { Button, Form, Input } from \"antd\"; // ant Design\nimport Link from \"next/link\";\nimport styled from \"styled-components\"; // 스타일 컨포넌트\n\n// 스타일 컨포넌트 : 스타일을 미리 정의, 컴포넌트에 적용시키는 방식으로 스타일을 적용시킨다\nconst ButtonWrapper = styled.div`\n  margin-top: 10px;\n`;\nconst FormWrapper = styled(Form)`\n    padding = 10px;\n`;\nconst LoginForm = ({\n  setIsloggedIn\n}) => {\n  // id, password의 상태를 초기화\n  // useState 훅을 사용하여 id와 password의 상태를 초기화\n  const {\n    0: id,\n    1: setId\n  } = useState(\"\");\n  const {\n    0: password,\n    1: setPassword\n  } = useState(\"\");\n\n  // id, password의 필드값이 변경 즉, 입력될때 호출되는 콜백함수이다.\n  // \"userCallback\" 훅을 사용하여 생성됨\n  // 입력 필드(input)의 값이 변경될 때마다 호출되는 이 함수들은 각각 id와 password의 상태를 업데이트\n  const onChangeId = useCallback(e => {\n    setId(e.target.value);\n  }, []);\n  const onChangePassword = useCallback(e => {\n    setPassword(e.target.value);\n  }, []);\n\n  // useCallback 훅을 사용하여 onsubmitForm 함수를 생성한다\n  // 폼이 제출될 때(onsubmitForm 함수가 호출될 때) 실행되는 함수로, 현재 입력된 id와 password를 콘솔에 출력하고,\n  // setIsLoggedIn 함수를 사용하여 로그인 상태를 true로 업데이트한다\n  const onsubmitForm = useCallback(() => {\n    console.log(id, password);\n    setIsloggedIn(true);\n  }, [id, password]);\n  return __jsx(FormWrapper, {\n    onFinish: onsubmitForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"user-id\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, \"\\uC544\\uC774\\uB514\"), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    name: \"user-id\",\n    value: id,\n    onChange: onChangeId,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"user-password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, \"\\uBE44\\uBC00\\uBC88\\uD638\"), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    name: \"user-password\" // 입력필드의 이름\n    ,\n    type: \"password\" // 비밀번호를 입력받는 필드, 입력한 문자가 \"*\"로 마스킹된다.\n    ,\n    value: password // \"password\"값은 이 입력 필드의 값으로 설정된다\n    ,\n    onChange: onChangePassword // 입력필드의 값이 변경될 때 호출되는 콜백 함수로 'onChangePassword'함수는 해당 값이 상태에 업데이트되도록 한다.\n    ,\n    required: true // 입력 필드가 비어있으면 제출이 되지 않도록 걍제하는 역할\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  })), __jsx(ButtonWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, \"\\uB85C\\uADF8\\uC778\"), __jsx(Link, {\n    href: \"/signup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, \"\\uD68C\\uC6D0\\uAC00\\uC785\")))));\n};\nexport default LoginForm;","map":{"version":3,"names":["React","useState","useCallback","Button","Form","Input","Link","styled","ButtonWrapper","div","FormWrapper","LoginForm","setIsloggedIn","id","setId","password","setPassword","onChangeId","e","target","value","onChangePassword","onsubmitForm","console","log","__jsx","onFinish","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","name","onChange","required","type","htmlType","loading","href"],"sources":["C:/Users/rkdwn/Documents/GitHub/react_Study/front/components/LoginForm.js"],"sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport { Button, Form, Input } from \"antd\"; // ant Design\r\nimport Link from \"next/link\";\r\nimport styled from \"styled-components\"; // 스타일 컨포넌트\r\n\r\n// 스타일 컨포넌트 : 스타일을 미리 정의, 컴포넌트에 적용시키는 방식으로 스타일을 적용시킨다\r\nconst ButtonWrapper = styled.div`\r\n  margin-top: 10px;\r\n`;\r\nconst FormWrapper = styled(Form)`\r\n    padding = 10px;\r\n`;\r\n\r\nconst LoginForm = ({ setIsloggedIn }) => {\r\n  // id, password의 상태를 초기화\r\n  // useState 훅을 사용하여 id와 password의 상태를 초기화\r\n  const [id, setId] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  // id, password의 필드값이 변경 즉, 입력될때 호출되는 콜백함수이다.\r\n  // \"userCallback\" 훅을 사용하여 생성됨\r\n  // 입력 필드(input)의 값이 변경될 때마다 호출되는 이 함수들은 각각 id와 password의 상태를 업데이트\r\n  const onChangeId = useCallback((e) => {\r\n    setId(e.target.value);\r\n  }, []);\r\n  const onChangePassword = useCallback((e) => {\r\n    setPassword(e.target.value);\r\n  }, []);\r\n\r\n  // useCallback 훅을 사용하여 onsubmitForm 함수를 생성한다\r\n  // 폼이 제출될 때(onsubmitForm 함수가 호출될 때) 실행되는 함수로, 현재 입력된 id와 password를 콘솔에 출력하고,\r\n  // setIsLoggedIn 함수를 사용하여 로그인 상태를 true로 업데이트한다\r\n  const onsubmitForm = useCallback(() => {\r\n    console.log(id, password);\r\n    setIsloggedIn(true);\r\n  }, [id, password]);\r\n\r\n  return (\r\n    <FormWrapper onFinish={onsubmitForm}>\r\n      <div>\r\n        <label htmlFor=\"user-id\">아이디</label>\r\n        <br />\r\n        <input name=\"user-id\" value={id} onChange={onChangeId} required />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"user-password\">비밀번호</label>\r\n        <br />\r\n        <input\r\n          name=\"user-password\" // 입력필드의 이름\r\n          type=\"password\" // 비밀번호를 입력받는 필드, 입력한 문자가 \"*\"로 마스킹된다.\r\n          value={password} // \"password\"값은 이 입력 필드의 값으로 설정된다\r\n          onChange={onChangePassword} // 입력필드의 값이 변경될 때 호출되는 콜백 함수로 'onChangePassword'함수는 해당 값이 상태에 업데이트되도록 한다.\r\n          required // 입력 필드가 비어있으면 제출이 되지 않도록 걍제하는 역할\r\n        />\r\n      </div>\r\n      <ButtonWrapper>\r\n        <Button type=\"primary\" htmlType=\"submit\" loading={false}>\r\n          로그인\r\n        </Button>\r\n        <Link href=\"/signup\">\r\n          <a>\r\n            <Button>회원가입</Button>\r\n          </a>\r\n        </Link>\r\n      </ButtonWrapper>\r\n    </FormWrapper>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}